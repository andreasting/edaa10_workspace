import se.lth.cs.window.SimpleWindow;

public class Turtle {
	private double posX, posY, beta;
	private boolean penDown;
	private SimpleWindow w;
 
  /** skapar en sköldpadda som ritar i ritfönstret w. 
      Från början befinner sig sköldpaddan i punkten xHome,yHome med pennan 
      lyft och huvudet pekande rakt uppåt i fönstret, dvs i negativ y-riktning  
  */
	
  Turtle(SimpleWindow w, int xHome, int yHome) {
	  posX = xHome;
	  posY = yHome;
	  beta = 90;
	  penDown = false;
	  this.w = w;

  }

  /** sänker pennan */
  void penDown() {
	  this.penDown = true;
	  
  }

  /** lyfter pennan */
  void penUp() {
	  this.penDown = false;
	  
  }

  /** går rakt framåt n pixlar i huvudets riktning */
  void forward(int n) {
	  posX += Math.round(n*Math.cos(this.beta*(Math.PI/180)));
	  posY -= Math.round(n*Math.sin(this.beta*(Math.PI/180)));
	  if(penDown) {
		  
		  w.lineTo((int)(Math.round(posX)), (int)Math.round(posY));
	  }
  }
 

  /** vrider huvudet beta grader åt vänster */
  void left(int beta) {
	  this.beta += beta;
  }

  /** vrider hvudet beta grader åt höger */
  void right(int beta) {
	  this.beta -= beta;

  }

  /** går till punkten newX,newY utan att rita. 
      Pennans läge och huvudets riktning påverkas inte */
  void jumpTo(int newX, int newY) {
	
	  w.moveTo((int)posX, (int)posY);
  }

  /** återställer huvudets riktning till den ursprungliga */
  void turnNorth() {
	  this.beta = 0;
	  
  }

  /** tar reda på sköldpaddans aktuella x-koordinat */
  int getX() {
	  return posX;
  }

  /** tar reda på sköldpaddans aktuella y-koordinat */
  int getY() {
	  return posY;
  }
}
